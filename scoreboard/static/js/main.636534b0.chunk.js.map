{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["Stats","_ref","players","totalPlayers","length","totalPoints","reduce","total","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","_this","now","Date","setState","prevState","handleStopWatch","handleReset","_this2","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","components_Stats","components_Stopwatch","Counter","index","changeScore","Icon","props","viewBox","isHighScore","d","transform","width","height","Player","_this$props","name","id","removePlayer","components_Icon","components_Counter","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","type","ref","placeholder","App","prevPlayerId","handleScoreChange","delta","getHighScore","scores","map","p","highScore","max","apply","Object","toConsumableArray","handleAddPlayer","concat","handleRemovePlayer","filter","components_Header","components_Player","key","toString","components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.636534b0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Stats = ({players}) => {\n    \n    const totalPlayers = players.length;\n\n    const totalPoints = players.reduce((total, player) => {\n        return total + player.score;\n    }, 0);\n\n    return(\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nexport default Stats;","import React, {Component} from 'react';\n\nclass Stopwatch extends Component{\n\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0,\n    };\n\n    componentDidMount(){\n        this.intervalID = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.intervalID);\n    }\n\n    tick = () =>{\n        if (this.state.isRunning){\n            const now = Date.now();\n            this.setState( prevState => ({\n                previousTime: now,\n                elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n            }));\n        }\n    }\n\n    handleStopWatch = () =>{\n        this.setState( prevState => ({\n            isRunning: !prevState.isRunning\n        }));\n        if (!this.state.isRunning){\n            this.setState({previousTime: Date.now()});\n        }\n    }\n\n    handleReset = () => {\n        this.setState({elapsedTime: 0})\n    }\n\n    render(){\n        const seconds = Math.floor(this.state.elapsedTime/1000)\n        return(\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <span className=\"stopwatch-time\">\n                    {seconds}\n                </span>\n                <button onClick={this.handleStopWatch}>{this.state.isRunning ? 'Stop': 'Start'}</button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        );  \n    }\n}\n\nexport default Stopwatch;","import React from 'react';\nimport Stats from './Stats'\nimport Stopwatch from './Stopwatch'\n\nconst Header = ({players, title}) => {\n  return (\n    <header>\n      <Stats players={players}/>\n      <h1>{title}</h1>\n      <Stopwatch />\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nconst Counter = ({index, score, changeScore}) => {\n    return (\n        <div className=\"counter\">\n        <button className=\"counter-action decrement\" onClick={() => changeScore(index, -1)}> - </button>\n        <span className=\"counter-score\">{ score }</span>\n        <button className=\"counter-action increment\" onClick={() => changeScore(index, 1)}> + </button>\n        </div>\n    );\n}\n\nexport default Counter;","import React from 'react';\n\nconst Icon = (props) => {\n\n    return(\n        <svg viewBox=\"0 0 44 35\" className={ props.isHighScore ? 'is-high-score' : null }>\n            <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n            <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n        </svg>\n    )\n};\n\nexport default Icon;","import React, {PureComponent} from 'react';\nimport Counter from './Counter';\nimport Icon from './Icon';  \n\nclass Player extends PureComponent {\n  render(){\n    const {name, id, score, index, removePlayer, changeScore} = this.props;\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>âœ–</button>\n\n            <Icon isHighScore={this.props.isHighScore} />\n          { name }\n        </span>\n  \n        <Counter \n          score={score}\n          index={index}\n          changeScore={changeScore}/>\n      </div>\n    );\n  }\n}\n\nexport default Player;","import React, { Component } from 'react';\n\nclass AddPlayerForm extends Component{\n\n    playerInput = React.createRef();\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addPlayer(this.playerInput.current.value)\n        e.currentTarget.reset();\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input \n                type=\"text\"\n                ref={this.playerInput}\n                placeholder=\"Enter a Player's name\" \n                />\n\n                <input \n                type=\"submit\"\n                value=\"Add Player\" \n                />\n            </form>\n        );\n    }\n}\n\n\nexport default AddPlayerForm;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Player from './components/Player';\nimport AddPlayerForm from './components/AddPlayerForm';\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"John\",\n        score: 0,\n        id: 1\n      },\n      {\n        name: \"Kamiren\",\n        score: 0,\n        id: 2\n      },\n      {\n        name: \"Ashley\",\n        score: 0,\n        id: 3\n      },\n      {\n        name: \"James\",\n        score: 0,\n        id: 4\n      }\n    ]\n  };\n\n  prevPlayerId = 4;\n\n  handleScoreChange = (index, delta) => {\n    this.setState( prevState => ({\n      score: prevState.players[index].score += delta\n    }));\n  }\n\n  getHighScore = () => {\n    const scores = this.state.players.map( p => p.score );\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    } \n    return null;\n  }\n\n  handleAddPlayer = (name) => {\n    this.setState({\n      players: [\n        ...this.state.players,\n        {\n          name: name,\n          score: 0,\n          id: this.prevPlayerId += 1\n        }\n      ]\n    });\n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  }\n\n  render() {\n    const highScore = this.getHighScore();\n    return (\n      <div className=\"scoreboard\">\n        <Header \n          title=\"Scoreboard\" \n          players={this.state.players} \n        />\n  \n        {/* Players list */}\n        {this.state.players.map( (player, index) =>\n          <Player \n\n            name={player.name}\n            id={player.id}\n            score={player.score}\n            key={player.id.toString()} \n            index={index}\n            changeScore={this.handleScoreChange}\n            removePlayer={this.handleRemovePlayer} \n            isHighScore={highScore === player.score}          \n          />\n        )}\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}